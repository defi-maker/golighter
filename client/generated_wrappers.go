// Code generated by helper script; DO NOT EDIT.
package client

import (
	"context"

	lighterapi "github.com/defi-maker/golighter/api"
)

func (c *Client) Status(ctx context.Context) (*lighterapi.Status, error) {
	resp, err := c.api.StatusWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Account(ctx context.Context, params *lighterapi.AccountParams) (*lighterapi.DetailedAccounts, error) {
	resp, err := c.api.AccountWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) AccountActiveOrders(ctx context.Context, params *lighterapi.AccountActiveOrdersParams) (*lighterapi.Orders, error) {
	resp, err := c.api.AccountActiveOrdersWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) AccountInactiveOrders(ctx context.Context, params *lighterapi.AccountInactiveOrdersParams) (*lighterapi.Orders, error) {
	resp, err := c.api.AccountInactiveOrdersWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) AccountLimits(ctx context.Context, params *lighterapi.AccountLimitsParams) (*lighterapi.AccountLimits, error) {
	resp, err := c.api.AccountLimitsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) AccountMetadata(ctx context.Context, params *lighterapi.AccountMetadataParams) (*lighterapi.AccountMetadatas, error) {
	resp, err := c.api.AccountMetadataWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) AccountTxs(ctx context.Context, params *lighterapi.AccountTxsParams) (*lighterapi.Txs, error) {
	resp, err := c.api.AccountTxsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) AccountsByL1Address(ctx context.Context, params *lighterapi.AccountsByL1AddressParams) (*lighterapi.SubAccounts, error) {
	resp, err := c.api.AccountsByL1AddressWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Announcement(ctx context.Context) (*lighterapi.Announcements, error) {
	resp, err := c.api.AnnouncementWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Apikeys(ctx context.Context, params *lighterapi.ApikeysParams) (*lighterapi.AccountApiKeys, error) {
	resp, err := c.api.ApikeysWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Block(ctx context.Context, params *lighterapi.BlockParams) (*lighterapi.Blocks, error) {
	resp, err := c.api.BlockWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) BlockTxs(ctx context.Context, params *lighterapi.BlockTxsParams) (*lighterapi.Txs, error) {
	resp, err := c.api.BlockTxsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Blocks(ctx context.Context, params *lighterapi.BlocksParams) (*lighterapi.Blocks, error) {
	resp, err := c.api.BlocksWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Candlesticks(ctx context.Context, params *lighterapi.CandlesticksParams) (*lighterapi.Candlesticks, error) {
	resp, err := c.api.CandlesticksWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) CurrentHeight(ctx context.Context) (*lighterapi.CurrentHeight, error) {
	resp, err := c.api.CurrentHeightWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) DepositHistory(ctx context.Context, params *lighterapi.DepositHistoryParams) (*lighterapi.DepositHistory, error) {
	resp, err := c.api.DepositHistoryWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) ExchangeStats(ctx context.Context) (*lighterapi.ExchangeStats, error) {
	resp, err := c.api.ExchangeStatsWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Export(ctx context.Context, params *lighterapi.ExportParams) (*lighterapi.ExportData, error) {
	resp, err := c.api.ExportWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) FastbridgeInfo(ctx context.Context) (*lighterapi.RespGetFastBridgeInfo, error) {
	resp, err := c.api.FastbridgeInfoWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) FundingRates(ctx context.Context) (*lighterapi.FundingRates, error) {
	resp, err := c.api.FundingRatesWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Fundings(ctx context.Context, params *lighterapi.FundingsParams) (*lighterapi.Fundings, error) {
	resp, err := c.api.FundingsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) L1Metadata(ctx context.Context, params *lighterapi.L1MetadataParams) (*lighterapi.L1Metadata, error) {
	resp, err := c.api.L1MetadataWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Liquidations(ctx context.Context, params *lighterapi.LiquidationsParams) (*lighterapi.LiquidationInfos, error) {
	resp, err := c.api.LiquidationsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) NextNonce(ctx context.Context, params *lighterapi.NextNonceParams) (*lighterapi.NextNonce, error) {
	resp, err := c.api.NextNonceWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) OrderBookDetails(ctx context.Context, params *lighterapi.OrderBookDetailsParams) (*lighterapi.OrderBookDetails, error) {
	resp, err := c.api.OrderBookDetailsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) OrderBookOrders(ctx context.Context, params *lighterapi.OrderBookOrdersParams) (*lighterapi.OrderBookOrders, error) {
	resp, err := c.api.OrderBookOrdersWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) OrderBooks(ctx context.Context, params *lighterapi.OrderBooksParams) (*lighterapi.OrderBooks, error) {
	resp, err := c.api.OrderBooksWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Pnl(ctx context.Context, params *lighterapi.PnlParams) (*lighterapi.AccountPnL, error) {
	resp, err := c.api.PnlWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) PositionFunding(ctx context.Context, params *lighterapi.PositionFundingParams) (*lighterapi.PositionFundings, error) {
	resp, err := c.api.PositionFundingWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) PublicPools(ctx context.Context, params *lighterapi.PublicPoolsParams) (*lighterapi.PublicPools, error) {
	resp, err := c.api.PublicPoolsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) PublicPoolsMetadata(ctx context.Context, params *lighterapi.PublicPoolsMetadataParams) (*lighterapi.RespPublicPoolsMetadata, error) {
	resp, err := c.api.PublicPoolsMetadataWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) RecentTrades(ctx context.Context, params *lighterapi.RecentTradesParams) (*lighterapi.Trades, error) {
	resp, err := c.api.RecentTradesWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) ReferralPoints(ctx context.Context, params *lighterapi.ReferralPointsParams) (*lighterapi.ReferralPoints, error) {
	resp, err := c.api.ReferralPointsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Trades(ctx context.Context, params *lighterapi.TradesParams) (*lighterapi.Trades, error) {
	resp, err := c.api.TradesWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) TransferHistory(ctx context.Context, params *lighterapi.TransferHistoryParams) (*lighterapi.TransferHistory, error) {
	resp, err := c.api.TransferHistoryWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) TransferFeeInfo(ctx context.Context, params *lighterapi.TransferFeeInfoParams) (*lighterapi.TransferFeeInfo, error) {
	resp, err := c.api.TransferFeeInfoWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Tx(ctx context.Context, params *lighterapi.TxParams) (*lighterapi.EnrichedTx, error) {
	resp, err := c.api.TxWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) TxFromL1TxHash(ctx context.Context, params *lighterapi.TxFromL1TxHashParams) (*lighterapi.EnrichedTx, error) {
	resp, err := c.api.TxFromL1TxHashWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Txs(ctx context.Context, params *lighterapi.TxsParams) (*lighterapi.Txs, error) {
	resp, err := c.api.TxsWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) WithdrawHistory(ctx context.Context, params *lighterapi.WithdrawHistoryParams) (*lighterapi.WithdrawHistory, error) {
	resp, err := c.api.WithdrawHistoryWithResponse(ctx, params)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) WithdrawalDelay(ctx context.Context) (*lighterapi.RespWithdrawalDelay, error) {
	resp, err := c.api.WithdrawalDelayWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}

func (c *Client) Info(ctx context.Context) (*lighterapi.ZkLighterInfo, error) {
	resp, err := c.api.InfoWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, resultCodeError(resp.StatusCode(), resp.Body, resp.JSON400)
}
